########################################################################
# Don't define triggers here.  Define them in the UI.
# Variables are new defined in this YAML file instead of the UI
########################################################################
# trigger:
## - development


variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'any cpu'
  dockerfilePath: '$(Build.SourcesDirectory)/src/KII.Platform.WebApi.MediaService.Api/Dockerfile'
  SQLProjPublishPath: '/s/data/KII.Platform.WebApi.MediaService.SqlDatabase/bin/'
  SONARQUBE_PROJECT_KEY: KII.Platform.WebApi.MediaService
  SONARQUBE_PROJECT_NAME: 'KII.Platform.WebApi.MediaService'
  ${{ if eq(variables['Build.DefinitionName'], 'Build Analysis - Master') }}:
    BUILD_SQL: true
    PUBLISH_ARTIFACTS: false
    PUBLISH_SONARQUBE: false #true
    SONARQUBE_SERVER_ENDPOINT: 'SonarQube - Developer Edition'
  ${{ elseif eq(variables['Build.DefinitionName'], 'PR Validation - Master') }}:
    BUILD_SQL: true
    PUBLISH_ARTIFACTS: true
    PUBLISH_SONARQUBE: false #true
    SONARQUBE_SERVER_ENDPOINT: 'SonarQube - Developer Edition'

jobs:
########################################################################
# Part I: Build the application.
#########################################################################
- job: Job_BuildApplication
  pool:
    vmImage: 'windows-latest' 
  displayName: Build the App
  steps:
    - checkout: self
      persistCredentials: true
    - task: CmdLine@2
      displayName: Dump directory contents
      inputs:
        script: |
          pwd
          
          echo BuildConfiguration == $(BuildConfiguration)
          
          echo BuildPlatform == $(BuildPlatform)
          
          echo Build.SourcesDirectory == $(Build.SourcesDirectory)
          
          tree "$(Build.SourcesDirectory)" /A
          
          dir $(Build.SourcesDirectory)
          
          echo Build.artifactstagingdirectory == $(Build.artifactstagingdirectory)
          
          dir $(Build.artifactstagingdirectory)
          
          echo Build.BinariesDirectory == $(Build.BinariesDirectory)
          
          dir $(Build.BinariesDirectory)
          
          echo Build.DefinitionName == $(Build.DefinitionName)
          echo BUILD_SQL == $(BUILD_SQL)
          echo PUBLISH_ARTIFACTS == $(PUBLISH_ARTIFACTS)
          echo PUBLISH_SONARQUBE == $(PUBLISH_SONARQUBE)
          echo SONARQUBE_PROJECT_KEY == $(SONARQUBE_PROJECT_KEY)
          echo SONARQUBE_PROJECT_NAME == $(SONARQUBE_PROJECT_NAME)
          echo SONARQUBE_SERVER_ENDPOINT == $(SONARQUBE_SERVER_ENDPOINT)
          
          echo "START OF PART I -- Build application"
    - task: UseDotNet@2
      displayName: Use .NET 8 Core sdk
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: true    
    - task: DotNetCoreCLI@2
      displayName: Restore Packages
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'config'
        nugetConfigPath: 'NuGet.Config'
#    - task: SonarQubePrepare@5
#      displayName: Prepare for SonarQube Analysis
#      condition: eq(variables['PUBLISH_SONARQUBE'], 'true')
#      inputs:
#        SonarQube: $(SONARQUBE_SERVER_ENDPOINT)
#        scannerMode: 'MSBuild'
#        projectKey: $(SONARQUBE_PROJECT_KEY)
#        projectName: $(SONARQUBE_PROJECT_NAME)
#        extraProperties: |
#          sonar.coverageReportPaths=".\.sonarqubecoverage\SonarQube.xml"
    - task: DotNetCoreCLI@2
      displayName: 'Build C# Projects'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --no-build --collect:"XPlat Code Coverage"'
        publishTestResults: false
      continueOnError: false
    - task: CmdLine@2
      displayName: Log Tests Output
      inputs:
        script: |
          tree "$(Build.SourcesDirectory)/test" /A
#    - task: reportgenerator@5
#      displayName: Report Generator - Code Coverage
#      inputs:
#        reports: test/*/TestResults/*/coverage.cobertura.xml
#        targetdir: .sonarqubecoverage
#        reporttypes: SonarQube
#    - task: SonarQubeAnalyze@5
#      displayName: Run SonarQube Analysis
#      condition: eq(variables['PUBLISH_SONARQUBE'], 'true')
#    - task: SonarQubePublish@5
#      displayName: Publish SonarQube Analysis
#      condition: eq(variables['PUBLISH_SONARQUBE'], 'true')
#      inputs:
#        pollingTimeoutSec: '300'
    - task: DotNetCoreCLI@2
      displayName: 'Publish Output files to Artifact Directory'
      condition: eq(variables['PUBLISH_ARTIFACTS'], 'true')
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(BuildConfiguration) --output "$(build.artifactstagingdirectory)"'
        zipAfterPublish: false
          
########################################################################
# Part II: Build the SQL Project database.
########################################################################
- job: Job_SQLProjBuildDB
  pool:
    vmImage: 'windows-latest'  
  displayName: Build Database from DB Project
  dependsOn: Job_BuildApplication
  steps:
    - task: CmdLine@2
      displayName: Dump directory contents
      inputs:
        script: |
          pwd

          echo BuildConfiguration == $(BuildConfiguration)
          
          echo BuildPlatform == $(BuildPlatform)
          
          echo SQLProjPublishPath == $(SQLProjPublishPath)
          
          echo Build.SourcesDirectory == $(Build.SourcesDirectory)

          dir $(Build.SourcesDirectory)

          echo Build.artifactstagingdirectory == $(Build.artifactstagingdirectory)

          dir $(Build.artifactstagingdirectory)

          echo Build.BinariesDirectory == $(Build.BinariesDirectory)

          dir $(Build.BinariesDirectory)
          echo "START OF PART II -- Build the database"
    - task: VSBuild@1
      displayName: 'Build dababase project'
      inputs:
        solution: '**\*.sqlproj'
        msbuildArgs: '/p:DSP="Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider"'
        configuration: '$(BuildConfiguration)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish database Artifacts'
      inputs:
        PathtoPublish: '$(agent.builddirectory)$(SQLProjPublishPath)$(BuildConfiguration)'
        ArtifactName: 'dropDB'
    - task: CmdLine@2
      displayName: Dump directory contents
      inputs:
        script: |
          pwd
          
          echo Build.SourcesDirectory == $(Build.SourcesDirectory)
          
          dir $(Build.SourcesDirectory)
          
          echo Build.artifactstagingdirectory == $(Build.artifactstagingdirectory)
          
          dir $(Build.artifactstagingdirectory)
          
          echo Build.BinariesDirectory == $(Build.BinariesDirectory)
          
          dir $(Build.BinariesDirectory)
          echo "END OF PART II -- Build the database"

- job: Job_BuildDockerImage
  displayName: Build Docker Image
  dependsOn: Job_SQLProjBuildDB
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    persistCredentials: true
  - script: |
      source vars.env 
      echo "Loaded variables from file:"
      echo "imageRepository: $imageRepository"
      echo "publishVersion: $publishVersion"
      echo "##vso[task.setvariable variable=imageRepository]$imageRepository"
      echo "##vso[task.setvariable variable=publishVersion]$publishVersion"
    displayName: 'Set and Use Variables for Versioning'
  - task: NuGetAuthenticate@1
    displayName: 'Authenticate to NuGet'
  - task: Docker@2
    displayName: 'Build Docker image'
    inputs:
      command: 'build'
      repository: $(imageRepository)
      dockerfile: $(dockerfilePath)
      buildContext: $(Build.SourcesDirectory)
      containerRegistry: 'dockerRegistryServiceConnection'
      arguments: '--build-arg FEED_ACCESSTOKEN=$(VSS_NUGET_ACCESSTOKEN)'
      tags: |
        latest
